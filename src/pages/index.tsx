import React from 'react';
import type { NextPage } from "next";
import Head from "next/head";
import { copyFileSync } from 'fs';

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const Home: NextPage = () => {
  const [areaText, setAreaText] = React.useState('Paste text here');
  const [parsedText, setParsedText] = React.useState('parsed text here');

  function parseText(contents:string): string {
    let fieldType = '';
    let articleRef = '';
    try{
      let posAmpersand = contents.indexOf('@');
      while (posAmpersand != -1)
      {
        let openBracket = contents.indexOf('{', posAmpersand);
        if(openBracket == -1) throw 'openBracket not found: ' + posAmpersand;

        fieldType = contents.slice(posAmpersand, openBracket);
        console.log('type: ', fieldType);

        let comma = contents.indexOf(',', openBracket);
        if(comma == -1){
          if(fieldType != 'Comment') throw 'invalid format - looking for comma after ' + fieldType;
        }
        else{
          articleRef = contents.slice(openBracket+1, comma);
        }
        let closingBracket = findClosingBrace(contents, openBracket + 1, '{', '}');
        if(closingBracket == -1) throw 'invalid format - closing bracket not foud after ' + fieldType;
        
        //create citation from contents
        posAmpersand = contents.indexOf('@', openBracket);
      }
      console.log('return parsed text: ', fieldType, articleRef);
    }
    catch(ex){
      console.error('Error parsing text: ' + ex);
    }
    return fieldType + ': ' + articleRef;
  }

  function findClosingBrace(contents:string, startPos:number, openBrace:string, closeBrace:string){
    let pos = findIndexOfAny(contents, startPos, [openBrace, closeBrace]);
    console.log('found brace: ', pos);
    let count = 0;
    while(pos != -1){
      count = contents[pos] == openBrace ? count + 1 : count -1;
      if(count == 0) return pos;
      
      pos = findIndexOfAny(contents, pos+1, [openBrace, closeBrace]);
    }
  }
  
  function findIndexOfAny(contents:string, startPos:number, searchItems:string[]): number {
    let foundItems = searchItems.map(si => contents.indexOf(si, startPos));
    return foundItems.reduce((a,b) => a == -1 ? b : b == -1 ? a : Math.min(a,b), -1);
  }
  
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Create <span className="text-purple-300">T3</span> App
        </h1>
        <p className="text-2xl text-gray-700">This stack uses:</p>


        <div className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-3 lg:w-2/3">
          <textarea className="border-gray-400 border-2 h-64"
          value={areaText}
          onChange={(e) => {
            setAreaText(e.target.value);
            setParsedText(parseText(e.target.value));
          }}
          />
          <textarea className="border-gray-400 border-2 h-64"
          value={parsedText} readOnly
          />
          <textarea className="border-gray-400 border-2 h-64" readOnly
          value={"@article{Saltelli2002, \nauthor = {Saltelli, Andrea}, \ndoi = {10.1016/S0010-4655(02)00280-1}, \nissn = {00104655}, \njournal = {Computer Physics Communications}, \nmonth = {may}, \nnumber = {2}, \npages = {280--297}, \ntitle = {Making best use of model evaluations to compute sensitivity indices}\n}"
          }>
          </textarea>
          <TechnologyCard
            name="NextJS"
            description="The React framework for production"
            documentation="https://nextjs.org/"
          />
          <TechnologyCard
            name="TypeScript"
            description="Strongly typed programming language that builds on JavaScript, giving you better tooling at any scale"
            documentation="https://www.typescriptlang.org/"
          />
          <TechnologyCard
            name="TailwindCSS"
            description="Rapidly build modern websites without ever leaving your HTML"
            documentation="https://tailwindcss.com/"
          />
        </div>
      </main>
    </>
  );
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};

export default Home;
